/*
 * pepipost_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package models_pkg

import(
    "encoding/json"
)

/**
 * Type definition for AggregatedByEnum enum
 */
type AggregatedByEnum int

/**
 * Value collection for AggregatedByEnum enum
 */
const (
    AggregatedBy_DAY AggregatedByEnum = 1 + iota
    AggregatedBy_WEEK
    AggregatedBy_MONTH
)

func (r AggregatedByEnum) MarshalJSON() ([]byte, error) { 
    s := AggregatedByEnumToValue(r)
    return json.Marshal(s) 
} 

func (r *AggregatedByEnum) UnmarshalJSON(data []byte) error { 
    var s string 
    json.Unmarshal(data, &s)
    v :=  AggregatedByEnumFromValue(s)
    *r = v 
    return nil 
 } 


/**
 * Converts AggregatedByEnum to its string representation
 */
func AggregatedByEnumToValue(aggregatedByEnum AggregatedByEnum) string {
    switch aggregatedByEnum {
        case AggregatedBy_DAY:
    		return "day"		
        case AggregatedBy_WEEK:
    		return "week"		
        case AggregatedBy_MONTH:
    		return "month"		
        default:
        	return "day"
    }
}

/**
 * Converts AggregatedByEnum Array to its string Array representation
*/
func AggregatedByEnumArrayToValue(aggregatedByEnum []AggregatedByEnum) []string {
    convArray := make([]string,len( aggregatedByEnum))
    for i:=0; i<len(aggregatedByEnum);i++ {
        convArray[i] = AggregatedByEnumToValue(aggregatedByEnum[i])
    }
    return convArray
}


/**
 * Converts given value to its enum representation
 */
func AggregatedByEnumFromValue(value string) AggregatedByEnum {
    switch value {
        case "DAY":
            return AggregatedBy_DAY
        case "WEEK":
            return AggregatedBy_WEEK
        case "MONTH":
            return AggregatedBy_MONTH
        default:
            return AggregatedBy_DAY
    }
}
