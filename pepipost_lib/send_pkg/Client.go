/*
* pepipost_lib
*
* This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
*/

package send_pkg


import(
  "encoding/json"
  "github.com/apimatic/unirest-go"
  "github.com/pepipost/pepipost-sdk-go/pepipost_lib/apihelper_pkg"
  "github.com/pepipost/pepipost-sdk-go/pepipost_lib/configuration_pkg"
  "github.com/pepipost/pepipost-sdk-go/pepipost_lib/models_pkg"
)
/*
* Client structure as interface implementation
*/
type SEND_IMPL struct {
  config configuration_pkg.CONFIGURATION
}

/**
* The endpoint send is used to generate the request to pepipost server for sending an email to recipients.
* @param    *models_pkg.Send        body     parameter: Required
* @return	Returns the []string response from the API call
*/
func (me *SEND_IMPL) CreateGenerateTheMailSendRequest (
  body *models_pkg.Send) ([]string, error) {
    //the endpoint path uri
    _pathUrl := "/send"

    //variable to hold errors
    var err error = nil
    //the base uri for api requests
    _queryBuilder := configuration_pkg.GetBaseURI(configuration_pkg.SERVER1,me.config);

    //prepare query string for API call
    _queryBuilder = _queryBuilder + _pathUrl

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
      //error in url validation or cleaning
      return nil, err
    }
    //prepare headers for the outgoing request
    headers := map[string]interface{} {
      "user-agent" : "APIMATIC 2.0",
      "accept" : "application/json",
      "content-type" : "application/json; charset=utf-8",
      "api_key" :   me.config.ApiKey(),
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, body)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request,false);
    if err != nil {
      //error in API invocation
      return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 405) {
      err = apihelper_pkg.NewAPIError("Invalid input", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
      if !(_response.Code == 400 || _response.Code == 401 || _response.Code == 403) {
          err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
      }
    }
    if(err != nil) {
      //error detected in status code validation
      return nil, err
    }

    //returning the response
    retVal := []string{_response.Body}
    //var retVal []string
    //err = json.Unmarshal(_response.RawBody, &retVal)

    //if err != nil {
      //error in parsing
    //  return nil, err
    //}
    return retVal, nil

  }

